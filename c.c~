/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 7/5/2016
Author  : 
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega16.h>
#include <delay.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
 #include <assert.h>
#include <stdlib.h>
// Alphanumeric LCD functions        
#include <alcd.h>

// Declare your global variables here
 void ScanRow();
 void ScanCol();              
 //void prepend(char* s, const char* t); 
 int machineState=0;
 //0 = entering user
 //1 = entering pass
 //2 = userLoggedIn
 //3 = changing pass
 //4 = entering pass again
        char temp[10];
        char temp2[10];
        int enteredCombination=0;
        int Col=0;
        int  Row=0;   
        int found =0;
        int userIndex=0;
        int userLoggedIn=0;
        
// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
// Place your code here

}

// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
// Place your code here

}

void main(void)
{
// Declare your local variables here
        int users[10][10];
        
        int keypad[4][4]; 
        int combination[4]={0,0,0,0}; 
        int counter0=0;
        int tens=1;
        int i=0,j=0;
        for(i=0;i<10;i++){
        for(j=0;j<10;j++){
        users[i][j]=0;
        }

        
        }
        users[0][0] = 0000; //users username
        users[0][1] = 1111; //users password
        users[1][0] = 1111;
        users[1][1] = 1111;
        users[2][0] = 2222;
        users[2][1] = 3333;
        
        keypad[0][0] = 7;
        keypad[0][1] = 8;
        keypad[0][2] = 9;
        keypad[0][3] = -1; //changePass
        keypad[1][0] = 6;
        keypad[1][1] = 5;
        keypad[1][2] = 4;
        keypad[1][3] = -4;       //Log Out
        keypad[2][0] = 3;
        keypad[2][1] = 2;
        keypad[2][2] = 1;
        keypad[2][3] = -99;
        keypad[3][0] = -2; //enter
        keypad[3][1] = 0;
        keypad[3][2] = -3;      //clear
        keypad[3][3] = -99;
// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In 
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Low level
// INT1: On
// INT1 Mode: Low level
// INT2: Off
GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);
GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 3
// D5 - PORTA Bit 4
// D6 - PORTA Bit 5
// D7 - PORTA Bit 6
// Characters/line: 16
lcd_init(16);
  lcd_gotoxy(0,0);
  lcd_puts("Enter User");
  
// Global enable interrupts
#asm("sei")
    DDRC = 0xF0;
   // PORTC = 0x0F;//enable pull up
while (1)
      {     
      enteredCombination =0;
      // Place your code here

 DDRC=0xf0;

    PORTC=0x0f;    //enable pull up

    while((PORTC&PINC)==0x0f);{
    ScanRow();
                               }
    DDRC=0x0f;

    PORTC=0xf0;

    while((PORTC&PINC)==0xf0);  {
    ScanCol();                   
   
    
    } 
    //log Out
    if(keypad[Row][Col]== -4){
   sprintf(temp,"");
   counter0=0;
   machineState=0;
   lcd_clear();
   lcd_gotoxy(0,0);
   lcd_puts("Enter User");
   continue;
    
    }
    //Clear    
    if(keypad[Row][Col]== -3){
    counter0=0;
    sprintf(temp,"");
    lcd_clear();
 
    continue;
    
    
    }
    //ChangePass
    if(keypad[Row][Col] == -1){
       
    if(machineState == 2){
    
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts("Enter New Pass");
    machineState++;
    counter0=0;
    sprintf(temp,"");
    
    
    
    }else if(machineState <2) {
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts("log in first");    
    machineState=0;
    counter0=0;
    sprintf(temp,"");
    
    
    }
    
    continue;
    
    
    }
    //submit new password
     if((keypad[Row][Col]== -2) && (machineState==3) && (counter0 == 4)){
    
      for(i=0;i<=3;i++){
        for(j=3;j>i;j--){
            tens = 10*tens;
        }
        enteredCombination += tens* combination[i];
    
        tens = 1;
    }
    
     users[userIndex][1] = enteredCombination;
     lcd_clear();
     lcd_gotoxy(0,0);
     sprintf(temp,"u:%d p:%d",users[userIndex][0],users[userIndex][1]);
     lcd_puts(temp);
    counter0 = 0;
    machineState=2;
    sprintf(temp,"");
    
    continue; 
    
    }
    //check users                          
     if((keypad[Row][Col]== -2) && (machineState==0) && (counter0 == 4)){
    lcd_clear();
    lcd_gotoxy(0,0);
     
    for(i=0;i<=3;i++){
        for(j=3;j>i;j--){
            tens = 10*tens;
        }
        enteredCombination += tens* combination[i];
    
        tens = 1;
    }
    lcd_clear();
    lcd_gotoxy(0,0);
   // sprintf(temp,"%d",enteredCombination);
    //lcd_puts(temp);    
    //delay_ms(500);
    for(i=0;i<10;i++){
      if(users[i][0] == enteredCombination){
      
      found = 1;
      machineState++; 
      counter0=0;          
      userIndex = i;
      sprintf(temp,"");
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts("enter pass");
    break;  
      
      }
    }
    if(found == 0){
      sprintf(temp,"");
      lcd_clear();
      lcd_gotoxy(0,0);
      lcd_puts("no user");
      counter0=0;
    
    }
    found =0;
    }
    //check password                          
     if((keypad[Row][Col]== -2) && (machineState==1) && (counter0 == 4)){
    lcd_clear();
    lcd_gotoxy(0,0);
     
    for(i=0;i<=3;i++){
        for(j=3;j>i;j--){
            tens = 10*tens;
        }
        enteredCombination += tens* combination[i];
    
        tens = 1;
    }
    if(users[userIndex][1] == enteredCombination){   
    
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts("access granted"); 
    machineState++;
    
    }else{
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts("incorrect password");
    
    
    }
    sprintf(temp,"");
    counter0=0;  
    continue;
    // sprintf(temp,"%d",enteredCombination);
    //lcd_puts(temp);    
    //delay_ms(500);
    
    
    }
    
    
    
   
   // combination += pow(10,(float)counter0)*keypad[Row][Col];
    if(keypad[Row][Col] != -2 && counter0<4){    
    
    lcd_gotoxy(0,0);   
    lcd_clear();  
    combination[counter0]= keypad[Row][Col];     
    sprintf(temp2,"%d",combination[counter0++]);
    strcat(temp,temp2);
    
   // sprintf(temp,"%d%d%d%d t:",combination[3],combination[2],combination[1],combination[0]);
      //prepend(temp2,temp);
    //sprintf(temp,"%d",combination);
   
    lcd_puts(temp);
    //check user exist
    }
   
    //counter0++;  
    
    delay_ms(500);
     }
}
void ScanRow()

{   

    switch(PINC & 0x0f)

    {

       case 0x07:Row=3;break;

       case 0x0b:Row=2;break;

       case 0x0d:Row=1;break;

       case 0x0e:Row=0;break;

    }

}

 

void ScanCol()
  
{          

    switch(PINC & 0xf0)

    {

                case 0x70:Col=3;break;

                case 0xb0:Col=2;break;

                case 0xd0:Col=1;break;

                case 0xe0:Col=0;break;

            }

}
